// Generated by CoffeeScript 1.6.3
(function() {
  var createSelection, create_note, getNode, getNodePath, hight_selection, option, socket;

  console.log("running webnote extension 0.0.1");

  
Array.prototype.compare = function (array) {
  i = 0
  while (true) {
    if (this.length == i && array.length == i)
      return 0;
    if (this.length == i)
      return -1;
    if (array.length == i)
      return 1;
    if (this[i] === array[i]) {
      i++;
      continue;
    }
    return this[i] - array[i];
  }
}
;

  socket = io.connect('http://localhost:8000');

  socket.on('connect', function() {
    socket.emit('url', location.href);
    socket.on('select', function(selection, color) {
      return hight_selection(selection, color);
    });
    socket.on('note.create', function(selection, color, uuid) {
      return create_note(selection, color, uuid);
    });
    socket.on('note.edit', function(text, id) {
      $("#" + id).text(text);
      return $("#" + id).attr('contenteditable', 'true');
    });
    socket.on('note.lock', function(id) {
      return $("#" + id).attr('contenteditable', 'false');
    });
    return socket.on('history', function(history) {
      var action, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = history.length; _i < _len; _i++) {
        action = history[_i];
        if (action.type === 'select') {
          _results.push(hight_selection(action.selection, action.color));
        } else if (action.type === 'note.create') {
          _results.push(create_note(action.selection, action.color, action.id));
        } else if (action.type === 'note.edit') {
          _results.push($("#" + action.id).text(action.text));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  });

  option = {
    bg: 'yellow',
    fg: 'black'
  };

  $(document).ready(function() {
    var tool_bar;
    tool_bar = '<div class="sh-toolbar">\n  <button id="highlight-trigger" class="sh-btn" data-triggered="false">Hight Light</button>\n  <button id="note-trigger" class="sh-btn" data-triggered="false">Note</button>\n  <select id="fg-selector">\n    <option value="black" selected>Fg: Black</option>\n    <option value="yellow">Fg: Yellow</option>\n    <option value="red">Fg: Red</option>\n    <option value="green">Fg: Green</option>\n    <option value="blue">Fg: Blue</option>\n  </select>\n  <select id="bg-selector">\n    <option value="yellow" selected>Bg: Yellow</option>\n    <option value="red">Bg: Red</option>\n    <option value="green">Bg: Green</option>\n    <option value="blue">Bg: Blue</option>\n  </select>\n</div>';
    $(tool_bar).appendTo('body');
    $(document).on('change', '#fg-selector', function(e) {
      return option.fg = $('#fg-selector').val();
    });
    $(document).on('change', '#bg-selector', function(e) {
      return option.bg = $('#bg-selector').val();
    });
    $(document).on('click', '.sh-btn', function(e) {
      e.preventDefault();
      if ($(this).attr('data-triggered') === 'true') {
        return $(this).attr('data-triggered', 'false');
      } else {
        $('.sh-btn').attr('data-triggered', 'false');
        return $(this).attr('data-triggered', 'true');
      }
    });
    $(document).on('mouseup', function(e) {
      var s, selection;
      if ($('#highlight-trigger').attr('data-triggered') === 'true') {
        selection = getSelection();
        if (selection.type === 'Range') {
          s = createSelection(selection);
          if (selection.removeAllRanges) {
            selection.removeAllRanges();
          }
          socket.emit('select', s, option);
        }
        return;
      }
      if ($('#note-trigger').attr('data-triggered') === 'true') {
        selection = getSelection();
        if (selection.type === 'Caret' || selection.type === 'Range') {
          s = createSelection(selection);
          if (selection.removeAllRanges) {
            selection.removeAllRanges();
          }
          socket.emit('note.create', s, option);
        }
      }
    });
    $(document).on('focusin', '.sh-note', function(e) {
      var id;
      id = $(this).attr('id');
      return socket.emit('note.lock', id);
    });
    $(document).on('keydown', '.sh-note', function(e) {
      var id, text;
      id = $(this).attr('id');
      text = $(this).text();
      return socket.emit('note.edit', text, id);
    });
    return $(document).on('focusout', '.sh-note', function(e) {
      var id, text;
      id = $(this).attr('id');
      text = $(this).text();
      return socket.emit('note.edit', text, id);
    });
  });

  createSelection = function(selection) {
    var n1, n2, ns, reverse;
    n1 = getNodePath(selection.baseNode);
    n2 = getNodePath(selection.extentNode);
    ns = {};
    reverse = false;
    if (n1.compare(n2) < 0) {
      reverse = false;
    } else if (n1.compare(n2) > 0) {
      reverse = true;
    } else {
      reverse = selection.baseOffset >= selection.extentOffset;
    }
    ns.base_node = reverse ? n2 : n1;
    ns.base_offset = reverse ? selection.extentOffset : selection.baseOffset;
    ns.extent_node = reverse ? n1 : n2;
    ns.extent_offset = reverse ? selection.baseOffset : selection.extentOffset;
    return ns;
  };

  getNodePath = function(node) {
    var path;
    path = [];
    while (node.tagName !== 'BODY') {
      
    for (i = 0; i < node.parentNode.childNodes.length; i++) {
      if (node.parentNode.childNodes[i] === node) {
        path.unshift(i)
        break
      }
    }
    ;
      node = node.parentNode;
    }
    return path;
  };

  getNode = function(path) {
    var index, node, _i, _len;
    node = $('body')[0];
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      index = path[_i];
      node = node.childNodes[index];
    }
    return node;
  };

  create_note = function(selection, color, uuid) {
    var elmt, l_block, location, node, offset, s1, s2;
    node = getNode(selection.extent_node);
    offset = selection.extent_offset;
    s1 = $(node).text().substring(0, offset);
    s2 = $(node).text().substring(offset);
    l_block = '<span id="sh-lct"></span>';
    $(node).replaceWith(s1 + l_block + s2);
    location = $("#sh-lct").offset();
    $("#sh-lct").remove();
    console.log(location);
    elmt = "<div id=\"" + uuid + "\" class=\"sh-note\" contenteditable=\"true\"></div>";
    $(elmt).css({
      'top': location.top,
      'left': location.left
    }).attr('data-bg', color.bg).attr('data-fg', color.fg).appendTo('body');
    return $('.sh-btn').attr('data-triggered', 'false');
  };

  hight_selection = function(selection, color) {
    var base_node, base_offset, extent_node, extent_offset, from, new_node, next_node, s1, s2, s3, tmp_node;
    base_node = getNode(selection.base_node);
    base_offset = selection.base_offset;
    extent_node = getNode(selection.extent_node);
    extent_offset = selection.extent_offset;
    if (base_node === extent_node) {
      s1 = $(base_node).text().substring(0, base_offset);
      s2 = $(base_node).text().substring(base_offset, extent_offset);
      s3 = $(base_node).text().substring(extent_offset);
      new_node = $('<span>').text(s2);
      new_node.addClass('sh-highlight');
      new_node.attr('data-bg', color.bg).attr('data-fg', color.fg);
      $(base_node).replaceWith(s1 + new_node[0].outerHTML + s3);
      return;
    }
    tmp_node = base_node;
    if (tmp_node.nextSibling !== null) {
      tmp_node = tmp_node.nextSibling;
      from = 'sibling';
    } else {
      tmp_node = tmp_node.parentNode;
      from = 'child';
    }
    s1 = $(base_node).text().substring(base_offset);
    s2 = $(base_node).text().substring(0, base_offset);
    new_node = $('<span>').text(s1);
    new_node.addClass('sh-highlight');
    new_node.attr('data-bg', color.bg).attr('data-fg', color.fg);
    $(base_node).replaceWith(s2 + new_node[0].outerHTML);
    while (tmp_node !== extent_node) {
      if (from !== 'child' && tmp_node.childNodes.length === 0) {
        if (tmp_node.nextSibling !== null) {
          next_node = tmp_node.nextSibling;
          from = 'sibling';
        } else {
          next_node = tmp_node.parentNode;
          from = 'child';
        }
        if (tmp_node.data.trim() !== '') {
          new_node = $('<span>').text(tmp_node.data);
          new_node.addClass('sh-highlight');
          new_node.attr('data-bg', color.bg).attr('data-fg', color.fg);
          $(tmp_node).replaceWith(new_node);
        }
        tmp_node = next_node;
        continue;
      }
      if (from !== 'child') {
        from = 'parent';
        tmp_node = tmp_node.childNodes[0];
        continue;
      }
      if (tmp_node.nextSibling !== null) {
        from = 'sibling';
        tmp_node = tmp_node.nextSibling;
        continue;
      }
      from = 'child';
      tmp_node = tmp_node.parentNode;
    }
    s1 = $(extent_node).text().substring(extent_offset);
    s2 = $(extent_node).text().substring(0, extent_offset);
    new_node = $('<span>').text(s2);
    new_node.addClass('sh-highlight');
    new_node.attr('data-bg', color.bg).attr('data-fg', color.fg);
    return $(extent_node).replaceWith(new_node[0].outerHTML + s1);
  };

}).call(this);
